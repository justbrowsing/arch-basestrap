#!/bin/bash
####################
### arch-basestrap #
version="0.4" ######
### JustBrowsing ###
####################

mirror="archlinux.supsec.org"
release="2013.08.01"
arch="i686"

label="ARCH"
imgSize="1600"
locale="en_US"
manpages="false"

tmpDir="/opt/arch-tmp"
buildDir="/opt/arch-build"
mntDir="/opt/arch-iso"

imgFile="archbase.img"
ext4File="root-image.fs"
sfsFile="root-image.fs.sfs"
isoFile="arch-basestrap.iso"


bootstrap="http://${mirror}/iso/${release}/archlinux-bootstrap-${release}-${arch}.tar.gz";

EXIT_STATUS() { echo "==> ERROR: $@"; CLEAN_UP; }

CLEAN_UP()
{
  echo "==> Cleaning up";
  umount "${mntDir}/var/cache" "${mntDir}/tmp" "${mntDir}/proc/" "${mntDir}/sys/" "${mntDir}/dev/pts" "${mntDir}/dev/" 2>/dev/null;
  umount "$mntDir/*/*" 2>/dev/null;
  umount "$mntDir/*" 2>/dev/null;
  umount "$mntDir" 2>/dev/null;
  losetup -d "$virtDrive";
  rm -rf "$mntDir"
  rm -rf "${buildDir}/syslinux"
  mount -o remount,gid=5,mode=620 /dev/pts
}

CREATE_DIET()
{
  docdiet="${mntDir}/opt/docdiet"
  echo '#!/bin/bash' > "$docdiet"
  echo "before=$(df  -H | grep ' /$' | awk '{print $4}')" >> "$docdiet"
  echo 'shopt -s extglob' >> "$docdiet"
  echo '[ ! -z "$1" ] && rm -rf /usr/share/locale/!($1)' >> "$docdiet"
  echo '[ "$2" = "false" ] && rm -rf/usr/share/{man,man?}' >> "$docdiet"
  echo "after=$(df  -H | grep ' /$' | awk '{print $4}')" >> "$docdiet"
  echo 'echo "==> $((((before-after)*1024)/10**6)) MB lost"' >> "$docdiet"
  chmod +x "$docdiet"
}

# Setup
echo "==> Running arch-basestrap"
[ "$UID" = "0" ] || EXIT_STATUS "Need to be root"
mkdir -p "$tmpDir" "$buildDir" "$mntDir"
trap CLEAN_UP INT;

# Download
cd "$tmpDir" || EXIT_STATUS "Couldn't cd into $tmpDir"
echo "==> Downloading bootstrap"
if [ ! -f "archlinux-bootstrap-${release}-${arch}.tar.gz" ]; then
  wget "$bootstrap" -O "archlinux-bootstrap-${release}-${arch}.tar.gz";
fi
[ -f "archlinux-bootstrap-${release}-${arch}.tar.gz" ] || EXIT_STATUS "Download failed"

# Create raw image
cd "$buildDir" || EXIT_STATUS "Couldn't cd into $buildDir"
[ -f "$imgFile" ] && rm "$imgFile";
echo "==> Creating raw image"
if [ ! -f "$imgFile" ]; then
  dd if=/dev/zero of="$imgFile" bs=1MB count="$imgSize" &&
  chmod 777 "$imgFile"
  parted -s -a optimal "$imgFile"
  parted -s "$imgFile" mklabel msdos
fi
[ -f "$imgFile" ] || EXIT_STATUS "Raw image creation failed"
imageType=$(file "$imgFile" | awk -F ": " '{print $2}');
[ "$imageType" = "x86 boot sector" ] || EXIT_STATUS "Invalid partition table"

# Partition image
echo "==> Creating partition"
losetup -f "$imgFile" || EXIT_STATUS "Unable to mount virtDrive"
virtDrive=$(losetup -a 2>&1 | grep "${buildDir}/${imgFile}" | awk -F ":" '{print $1}');
[ -b "$virtDrive" ] || EXIT_STATUS "loopback failed"
fdisk -l "$virtDrive" || EXIT_STATUS "Invalid virtDrive"
virtPart=$(fdisk -l "$virtDrive" 2>&1 | tail -n 1 | awk '{print $1}');
if [ ! -b "$virtPart" ]; then
  parted -s "$virtDrive" mkpart primary 1 "$imgSize"
  virtPart=$(fdisk -l "$virtDrive" 2>&1 | tail -n 1 | awk '{print $1}');
fi
[ -b "$virtPart" ] || EXIT_STATUS "Failed to create partition"

# Create filesystem
echo "==> Create filesystem"
virtFS=$(fsck -N "$virtPart" 2>&1 | awk -F " fsck." '{print $2}' | awk '{print $1}' | grep -v ^$);
if [ "$virtFS" != "ext4" ]; then
  mkfs.ext4 -L "$label" "$virtPart" || EXIT_STATUS "Failed to create EXT4 partition"
  virtFS=$(fsck -N "$virtPart" 2>&1 | awk -F " fsck." '{print $2}' | awk '{print $1}' | grep -v ^$);
fi
[ "$virtFS" = "ext4" ] || EXIT_STATUS "Filesystem check failed. Not ext4"

# Uncompress
echo "==> Mounting partition"
mount "$virtPart" "$mntDir" || EXIT_STATUS "Couldn't mount $mntDir"
cd "$mntDir" || EXIT_STATUS "Couldn't cd into $mntDir"
echo "==> Uncompressing bootstrap"
if [ ! -f "${mntDir}/etc/arch-release" ]; then
  tar -xzpf "${tmpDir}/archlinux-bootstrap-${release}-${arch}.tar.gz" --strip-components=1;
fi
[ -f "${mntDir}/etc/arch-release" ] || EXIT_STATUS "Archive failed to decompress"

# Fix build files
sed -i 's/^#Server = /Server = /g' etc/pacman.d/mirrorlist
echo "nameserver 8.8.8.8" > etc/resolv.conf
[ -f "etc/pacman.conf.stock" ] || cp etc/pacman.conf etc/pacman.conf.stock 2>/dev/null
sed -i 's/^Architecture =.*/Architecture = i686/g' etc/pacman.conf
sed -i 's/^CheckSpace/#CheckSpace/g' etc/pacman.conf

# Enter chroot
cd "$buildDir"
echo "==> Mounting chroot: ${mntDir}"
mount -t proc proc "${mntDir}/proc/"
mount -t sysfs sys "${mntDir}/sys/"
mount -o bind /dev "${mntDir}/dev/"
mount -t devpts pts "${mntDir}/dev/pts"

mkdir -p "${tmpDir}/var-cache" "${tmpDir}/tmp-dir"
mount -o bind,exec,rw "${tmpDir}/var-cache" "${mntDir}/var/cache"
mount -o bind,exec,rw "${tmpDir}/tmp-dir" "${mntDir}/tmp"
mkdir -p "${mntDir}/var/cache/pacman/pkg"
[ -d "${pkgDir}" ] && cp "${pkgDir}"/* "${tmpDir}/var-cache/pacman/pkg/" 2>/dev/null;

read -t 5 -n 1 -p "==> Enter chroot (y/N): " input
echo "";
if [[ "$input" = [Yy] ]]; then
  chroot "$mntDir" /bin/bash;
fi

# Set some basics
echo "$hostname" > "${mntDir}/etc/hostname"
timezone=$(readlink -e /etc/localtime 2>/dev/null);
if [ ! -z "$timezone" ]; then
  chroot "$mntDir" ln -s "$timezone" /etc/localtime
fi

# Prepare keyring
wget "https://www.archlinux.org/packages/community/${arch}/haveged/download/" -O "${mntDir}/haveged-latest-${arch}.pkg.tar.xz"
[ -f "${mntDir}/haveged-latest-${arch}.pkg.tar.xz"  ] || EXIT_STATUS "Unable to download haveged package"
chroot "$mntDir" pacman -U "haveged-latest-${arch}.pkg.tar.xz" --noconfirm
chroot "$mntDir" /usr/sbin/haveged -w 1024 -v 1
chroot "$mntDir" pacman-key --init
chroot "$mntDir" pacman-key --populate archlinux
killall haveged

# Make some scripts
CREATE_DIET

# Update system
chroot "$mntDir" mkdir -p /var/cache/{packer,pacman}/pkg
chroot "$mntDir" pacman -Syy
chroot "$mntDir" pacman -Su archiso device-mapper --needed --noconfirm
chroot "$mntDir" pacman -S linux linux-headers --noconfirm
sed -i 's/^HOOKS=.*/HOOKS="base udev modconf block filesystems keyboard shutdown"/g' "${mntDir}/etc/mkinitcpio.conf"
chroot "$mntDir" mkinitcpio -p linux
cp "${mntDir}/boot/vmlinuz-linux" "${tmpDir}/vmlinuz-linux"
cp "${mntDir}/boot/initramfs-linux.img" "${tmpDir}/initramfs-linux.img"

# Go on a diet
chroot "$mntDir" "/opt/docdiet"

# Install dev packages
read -t 5 -n 1 -p "==> Install dev packages (Y/n): " input
echo "";
if [[ "$input" != [Nn] ]]; then
  chroot "$mntDir" pacman -S base base-devel --needed --noconfirm
fi

# Enable networking
chroot "$mntDir" pacman -S dhcpcd iproute2 --needed --noconfirm
chroot "$mntDir" ln -s /usr/lib/systemd/system/dhcpcd.service /etc/systemd/system/multi-user.target.wants/dhcpcd.service

# Install syslinux bootloader
echo "==> Installing bootloader"
chroot "$mntDir" pacman -S arch-install-scripts syslinux --needed --noconfirm
echo "${virtPart} / ext4 rw,relatime,data=ordered 0 1" > "${mntDir}/etc/fstab"
chroot "$mntDir" syslinux-install_update -i -a -m
sed -i 's/ root=.*/ root=\/dev\/sda1 rw/g' "${mntDir}/boot/syslinux/syslinux.cfg"

# Go on a diet
chroot "$mntDir" "/opt/docdiet"

echo "==> Exiting chroot"
cd "$buildDir"
umount "${mntDir}/var/cache" "${mntDir}/tmp" "${mntDir}/proc/" "${mntDir}/sys/" "${mntDir}/dev/pts" "${mntDir}/dev/" 2>/dev/null
umount "$mntDir/*/*" 2>/dev/null
umount "$mntDir/*" 2>/dev/null
sleep 1
sync
umount "$mntDir"


# Clean up
CLEAN_UP
echo "==> [DONE]"

### END ###
