#!/bin/bash
####################
### arch-basestrap #
version="1.0" ######
### JustBrowsing ###
####################

arch="i686"
release="2014.12.01"
mirror="mirrors.dotsrc.org/archlinux"
bootstrap="http://${mirror}/iso/${release}/archlinux-bootstrap-${release}-${arch}.tar.gz";

label="arch-basestrap"
imgSize="2000"
startPos="2048"
locale="en_US"
manpages="false"

tmpDir="/opt/just-tmp"
buildDir="/opt/just-build"
mntDir="/opt/just-iso"

imgFile="archbase.img"
ext4File="root-image.fs"
sfsFile="root-image.fs.sfs"
isoFile="arch-basestrap.iso"

# Colors
RESET="\e[0;0m"
FAIL="\e[1;31m"
WARN="\e[1;33m"
BOLD="\e[1;34m"
NOTE="\e[1;35m"
HINT="\e[1;36m"
S0="${HINT}(*)"

EXIT_STATUS() { echo -e "\033[1m:::::> ERROR: $@\033[0m"; CLEAN_UP; exit 1; }

CLEAN_UP()
{
  echo -e "\033[1m:::::> Cleaning up\033[0m"
  sync
  sleep 1
  sync
  pkill -f gpg
  cd /
  umount --recursive "${mntDir}"
  umount "${mntDir}/var/cache" "${mntDir}/var/cache" "${mntDir}/tmp" "${mntDir}/proc/" "${mntDir}/sys/" "${mntDir}/dev/pts" "${mntDir}/dev/" 2>/dev/null
  umount "$mntDir/*/*" 2>/dev/null
  umount "$mntDir/*" 2>/dev/null
  umount "$mntDir" 2>/dev/null
  losetup -d "$virtDrive" 2>/dev/null
  losetup -D
  rm -rf "${buildDir}/syslinux"
  mount -o remount,gid=5,mode=620 /dev/pts
  sync
}

MENU() {
  echo ""
  echo -e "${NOTE}==== arch-basestrap ====${RESET}"
  echo -e "${HINT}1.) Download bootstrap ${S1}${RESET}"
  echo -e "${BOLD}2.) Create disk image ${S2}${RESET}"
  echo -e "${HINT}3.) Format image ${S3}${RESET}"
  echo -e "${BOLD}4.) Unpack bootstrap ${S4}${RESET}"
  echo -e "${HINT}5.) Mount basestrap ${S5}${RESET}"
  echo -e "${BOLD}6.) Base config ${S6}${RESET}"
  echo -e "${HINT}7.) Install base packages ${S7}${RESET}"
  echo -e "${BOLD}8.) Enter chroot ${S8}${RESET}"
  echo -e "${HINT}9.) Boot nspawn container ${S9}${RESET}"
  echo -e "${BOLD}0.) Quit${RESET}"
}

DOWNLOAD_BOOTSTRAP()
{
  # Download
  cd "$tmpDir" || EXIT_STATUS "Couldn't cd into $tmpDir"
  echo -e "\033[1m:::::> Downloading bootstrap\033[0m"
  if [ ! -f "archlinux-bootstrap-${release}-${arch}.tar.gz" ]; then
    wget "$bootstrap" -O "archlinux-bootstrap-${release}-${arch}.tar.gz";
  fi
  [ -f "archlinux-bootstrap-${release}-${arch}.tar.gz" ] || EXIT_STATUS "Download failed";
  S1="$S0"
}

RAW_IMAGE()
{
  # Image overwrite check
  if [ -f "${buildDir}/$imgFile" ]; then
    read -t 5 -n 1 -p ":::::> Overwrite image (y/N): " input
    echo "";
    [[ "$input" = [Yy] ]] && rm "${buildDir}/$imgFile"
  fi

  # Create raw image
  cd "$buildDir" || EXIT_STATUS "Couldn't cd into $buildDir"
  echo -e "\033[1m:::::> Creating raw image\033[0m"
  if [ ! -f "$imgFile" ]; then
    fallocate -l "${imgSize}M" -o "$startPos" "$imgFile" &&
    chmod 777 "$imgFile"
    parted -s -a optimal "$imgFile"
    parted -s "$imgFile" mklabel msdos
  fi
  [ -f "$imgFile" ] || EXIT_STATUS "Raw image creation failed"
  imageType=$(file "$imgFile" | awk -F ": " '{print $2}');
  [ "$imageType" = "x86 boot sector" -o "DOS/MBR boot sector" ] || EXIT_STATUS "Invalid partition table";
  S2="$S0"
}

LOOP_IMAGE()
{
  echo -e "\033[1m:::::> Mounting image\033[0m"
  cd "$buildDir" || EXIT_STATUS "Couldn't cd into $buildDir"
  resetLoop=$(losetup -f 2>&1  | grep -o "unused loop device");
  [ "$resetLoop" = "unused loop device" ] && modprobe -r loop && modprobe loop
  losetup -f "$imgFile" || EXIT_STATUS "Unable to mount virtDrive"
  virtDrive=$(losetup -a 2>&1 | grep "${buildDir}/${imgFile}" | awk -F ":" '{print $1}');
  [ -b "$virtDrive" ] || EXIT_STATUS "loopback failed"
  fdisk -l "$virtDrive" || EXIT_STATUS "Invalid virtDrive"
  virtPart=$(fdisk -l "$virtDrive" 2>&1 | grep "^/" | tail -n 1 | awk '{print $1}');
}

PART_IMAGE()
{
  # Partition image
  echo -e "\033[1m:::::> Creating partition\033[0m"
  if [ ! -b "$virtPart" ]; then
    parted -s "$virtDrive" mkpart primary 1 "$imgSize"
    virtPart=$(fdisk -l "$virtDrive" 2>&1 | grep "^/" | tail -n 1 | awk '{print $1}');
  fi
  [ -b "$virtPart" ] || EXIT_STATUS "Failed to create partition"
}

FORMAT_IMAGE()
{
  # Create filesystem
  echo -e "\033[1m:::::> Create filesystem\033[0m"
  [ -b "$virtPart" ] || EXIT_STATUS "Failed to create partition"
  virtFS=$(fsck -N "$virtPart" 2>&1 | awk -F " fsck." '{print $2}' | awk '{print $1}' | grep -v ^$);
  if [ "$virtFS" != "ext4" ]; then
    mkfs.ext4 -L "$label" "$virtPart" || EXIT_STATUS "Failed to create EXT4 partition"
    virtFS=$(fsck -N "$virtPart" 2>&1 | awk -F " fsck." '{print $2}' | awk '{print $1}' | grep -v ^$);
  fi
  [ "$virtFS" = "ext4" ] || EXIT_STATUS "Filesystem check failed. Not ext4"
  S3="$S0"
}

UNPACK_BOOTSTRAP()
{
  # Uncompress
  echo -e "\033[1m:::::> Mounting partition\033[0m"
  mount "$virtPart" "$mntDir" || EXIT_STATUS "Couldn't mount $mntDir"
  cd "$mntDir" || EXIT_STATUS "Couldn't cd into $mntDir"
  echo -e "\033[1m:::::> Uncompressing bootstrap\033[0m"
  if [ ! -f "${mntDir}/etc/arch-release" ]; then
    tar -xzpf "${tmpDir}/archlinux-bootstrap-${release}-${arch}.tar.gz" --strip-components=1;
  fi
  [ -f "${mntDir}/etc/arch-release" ] || EXIT_STATUS "Archive failed to decompress"
}

FIX_PACMAN()
{
  # Fix build files
  sed -i 's/^#Server = /Server = /g' "${mntDir}/etc/pacman.d/mirrorlist"
  echo "nameserver 8.8.8.8" > "${mntDir}/etc/resolv.conf"
  [ -f "etc/pacman.conf.stock" ] || cp "${mntDir}/etc/pacman.conf" "${mntDir}/etc/pacman.conf.stock" 2>/dev/null
  sed -i 's/^Architecture =.*/Architecture = i686/g' "${mntDir}/etc/pacman.conf"
  sed -i 's/^CheckSpace/#CheckSpace/g' "${mntDir}/etc/pacman.conf"
  sed -i 's/^#Color/Color/g' "${mntDir}/etc/pacman.conf"
  S4="$S0"
}

MOUNT_IMAGE()
{
  # Check mounted
#  imgLoop=$(losetup -l 2>&1 | grep -o "${buildDir}/${imgFile}")
#  [ -z "$imgLoop" ] && LOOP_IMAGE

#  imgRoot=$(df -h 2>/dev/null | grep -o "$mntDir")
#  [ -z "$imgRoot" ] && mount "$virtPart" "$mntDir"

  offset=$((startPos*512))
  imgRoot=$(df -h 2>/dev/null | grep -o "$mntDir")
  if [ -z "$imgRoot" ]; then
    imgLoop=$(losetup -l 2>&1 | grep -o "${buildDir}/${imgFile}")
    [ -z "$imgLoop" ] || losetup -d "$virtDrive"
    modprobe -r loop && modprobe loop
    mount -o loop,offset=$offset "${buildDir}/${imgFile}" "$mntDir" || EXIT_STATUS "Unable to mount image"
    echo "==> mounted"
  else
    echo "==> already mounted"
  fi
}

CREATE_CHROOT()
{
  # Enter chroot
  echo -e "\033[1m:::::> Mounting chroot: ${mntDir}\033[0m" &&
#  mount -t proc proc -o nosuid,noexec,nodev "${mntDir}/proc/" &&
#  mount -t sysfs sys -o nosuid,noexec,nodev,ro "${mntDir}/sys/" &&
#  mount -t devtmpfs udev -o mode=0755,nosuid "${mntDir}/dev/" &&
#  mount -t devpts pts -o mode=0620,gid=5,nosuid,noexec "${mntDir}/dev/pts"

  mount --make-private -t proc proc "${mntDir}/proc/" &&
  mount --make-private -t sysfs sys "${mntDir}/sys/" &&
  mount --make-private -t devtmpfs udev "${mntDir}/dev/" &&
  mount --make-private -t devpts pts "${mntDir}/dev/pts"

  mkdir -p "${tmpDir}/var-cache" "${tmpDir}/tmp-dir"
  mkdir -p "${mntDir}/var/cache" "${mntDir}/tmp"
  mount -o bind,exec,rw "${tmpDir}/var-cache" "${mntDir}/var/cache"
  mount -o bind,exec,rw "${tmpDir}/tmp-dir" "${mntDir}/tmp"
  mkdir -p "${mntDir}/var/cache/pacman/pkg"
  mkdir -p "${mntDir}/var/cache/apacman/pkg"
  mount -o remount,gid=5,mode=620 /dev/pts &&
  S5="$S0"
}

BASE_CONFIG()
{
  echo -e "\033[1m:::::> Set some basics\033[0m"
  echo "${virtPart} / ext4 rw,relatime,data=ordered 0 1" > "${mntDir}/etc/fstab"
  echo "$label" > "${mntDir}/etc/hostname"

  timezone=$(readlink -e /etc/localtime 2>/dev/null);
  if [ ! -z "$timezone" ]; then
    chroot "$mntDir" ln -s "$timezone" /etc/localtime 2>/dev/null
  fi

  if [ ! -z "$locale" ]; then
    sed -i "s/^#${locale}.UTF-8/${locale}.UTF-8/g" "${mntDir}/etc/locale.gen"
    chroot "$mntDir" locale-gen
  fi
}

ENTER_CHROOT()
{
  imgRoot=$(df -h 2>/dev/null | grep -o "$mntDir")
  [ -z "$imgRoot" ] && MOUNT_IMAGE && CREATE_CHROOT
  chroot "$mntDir" /bin/bash
}

NSPAWN_BOOT()
{
  imgRoot=$(df -h 2>/dev/null | grep -o "$mntDir")
  [ -z "$imgRoot" ] && MOUNT_IMAGE &&
  systemd-nspawn -b -D "$mntDir" ||
  systemd-nspawn -D "$mntDir"
}

GENERATE_ENTROPY()
{
  echo -e "\033[1m:::::> Prepare keyring\033[0m"
  if [ ! -f "${mntDir}/etc/.entropy" ]; then
    [ -f "${mntDir}/haveged-latest-${arch}.pkg.tar.xz" ] ||
    wget "https://www.archlinux.org/packages/extra/${arch}/haveged/download/" -O "${mntDir}/haveged-latest-${arch}.pkg.tar.xz"
    [ -f "${mntDir}/haveged-latest-${arch}.pkg.tar.xz" ] || EXIT_STATUS "Unable to download haveged package"
    chroot "$mntDir" pacman -U "haveged-latest-${arch}.pkg.tar.xz" --noconfirm
    echo -e "\033[1m:::::> Generating entropy\033[0m"
    chroot "$mntDir" /usr/bin/haveged -w 1024 -v 1
    chroot "$mntDir" rm -rf /etc/pacman.d/gnupg
    chroot "$mntDir" pacman -Syy
    chroot "$mntDir" pacman-key --init
    chroot "$mntDir" pacman-key --populate archlinux
    killall haveged
    chroot "$mntDir" touch "/etc/.entropy"
  fi
  S6="$S0"
}

CORE_INSTALL()
{
  # Update system
  chroot "$mntDir" mkdir -p /var/cache/{apacman,pacman}/pkg
  chroot "$mntDir" pacman -Syy
  chroot "$mntDir" pacman -Su device-mapper grep psmisc procps-ng --needed --noconfirm 3>&1 1>&2 2>&3 | grep -v "is up to date -- skipping"
  chroot "$mntDir" pacman-db-upgrade
}

UPDATE_KERNEL()
{
  chroot "$mntDir" sed -i "s/^PRESETS=.*/PRESETS=()/g" "/etc/mkinitcpio.d/linux.preset" 2>/dev/null
  chroot "$mntDir" pacman -S linux linux-headers --noconfirm
  chroot "$mntDir" rm "/boot/initramfs-linux-fallback.img" 2>/dev/null
  chroot "$mntDir" sed -i 's/^HOOKS=.*/HOOKS="base udev modconf block filesystems keyboard shutdown"/g' "/etc/mkinitcpio.conf"
  line=$(grep -n "^# COMPRESSION_OPTIONS" "${mntDir}/etc/mkinitcpio.conf" | awk -F : '{print $1}');
  line=$((line-1));
  chroot "$mntDir" sed -i "${line}iCOMPRESSION=""\"xz""\"" "/etc/mkinitcpio.conf"
  chroot "$mntDir" sed -i "s/^PRESETS=.*/PRESETS=('default')/g" "/etc/mkinitcpio.d/linux.preset"
  chroot "$mntDir" mkinitcpio -p linux
  cp "${mntDir}/boot/vmlinuz-linux" "${tmpDir}/vmlinuz-linux"
  cp "${mntDir}/boot/initramfs-linux.img" "${tmpDir}/initramfs-linux.img"
  S7="$S0"
}

CLOSE_IMAGE()
{
  echo -e "\033[1m:::::> Exiting chroot\033[0m"
  cd "$buildDir"
  sync
  pkill -f gpg
  cd /
  sleep 1
  sync
  umount --recursive "${mntDir}"
  umount "${mntDir}/var/cache" "${mntDir}/var/cache" "${mntDir}/tmp" "${mntDir}/proc/" "${mntDir}/sys/" "${mntDir}/dev/pts" "${mntDir}/dev/" 2>/dev/null
  umount "$mntDir/*/*" 2>/dev/null
  umount "$mntDir/*" 2>/dev/null
  sleep 1
  sync
  umount "$mntDir" 2>/dev/null
  S8="$S0"
}

###########################

# Setup
echo -e "\033[1m:::::> Running arch-basestrap\033[0m"
[ "$UID" = "0" ] || EXIT_STATUS "Need to be root"
mkdir -p "$tmpDir" "$buildDir" "$mntDir"
trap CLEAN_UP INT;

# Checks
[ -f "${tmpDir}/archlinux-bootstrap-${release}-${arch}.tar.gz" ] && S1="$S0"
[ -f "${buildDir}/$imgFile" ] && S2="$S0"

# Prompt user
while [ "$input" != "0" ]; do
  MENU
  read -n 1 -p "Select an option [0-9]: " input
  echo ""
  if [ "$input" = "1" ]; then
    DOWNLOAD_BOOTSTRAP
  elif [ "$input" = "2" ]; then
    RAW_IMAGE && LOOP_IMAGE
  elif [ "$input" = "3" ]; then
    PART_IMAGE && FORMAT_IMAGE
  elif [ "$input" = "4" ]; then
    UNPACK_BOOTSTRAP && FIX_PACMAN
  elif [ "$input" = "5" ]; then
    MOUNT_IMAGE && CREATE_CHROOT
  elif [ "$input" = "6" ]; then
    BASE_CONFIG && GENERATE_ENTROPY
  elif [ "$input" = "7" ]; then
    CORE_INSTALL && UPDATE_KERNEL
  elif [ "$input" = "8" ]; then
    ENTER_CHROOT; CLEAN_UP
  elif [ "$input" = "9" ]; then
    NSPAWN_BOOT && CLEAN_UP
  fi
done

CLEAN_UP

### END ###
